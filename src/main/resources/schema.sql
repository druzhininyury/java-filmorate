DROP TABLE IF EXISTS films_likes;
DROP TABLE IF EXISTS films;
DROP TABLE IF EXISTS genres;
DROP TABLE IF EXISTS ratings;
DROP TABLE IF EXISTS friends;
DROP TABLE IF EXISTS users;

CREATE TABLE IF NOT EXISTS genres (
	id Integer generated by default as identity primary key,
	name VARCHAR
);

CREATE TABLE IF NOT EXISTS ratings (
	id INTEGER generated by default as identity primary key,
	name VARCHAR
);


CREATE TABLE IF NOT EXISTS films (
	id INTEGER generated by default as identity primary key,
	name VARCHAR(200),
	description VARCHAR,
	release_date timestamp,
	duration INTEGER,
	genre_id Integer,
	rating_id Integer,
	CONSTRAINT fk_films_genre_id FOREIGN KEY(genre_id) REFERENCES genres(id) ON DELETE CASCADE,
	CONSTRAINT fk_films_rating_id FOREIGN KEY(rating_id) REFERENCES ratings(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS users (
	id INTEGER generated by default as identity primary key,
	email VARCHAR,
	login VARCHAR,
	name VARCHAR,
	birthday timestamp
);

CREATE TABLE IF NOT EXISTS films_likes (
	film_id INTEGER,
	user_id INTEGER,
	CONSTRAINT fk_films_likes_film_id FOREIGN KEY(film_id) REFERENCES films(id) ON DELETE CASCADE,
	CONSTRAINT fk_films_likes_user_id FOREIGN KEY(user_id) REFERENCES users(id) ON DELETE CASCADE
);

CREATE TYPE IF NOT EXISTS friend_status AS ENUM ('CONFIRMED', 'REQUEST_FROM', 'REQUEST_TO');

CREATE TABLE IF NOT EXISTS friends (
	user_id INTEGER,
	friend_id INTEGER,
	status friend_status,
	CONSTRAINT fk_friends_user_id FOREIGN KEY(user_id) REFERENCES users(id) ON DELETE CASCADE,
	CONSTRAINT fk_friends_friend_id FOREIGN KEY(friend_id) REFERENCES users(id) ON DELETE CASCADE
);